http://localhost:8080/coches/listar





La aplicación que hemos desarrollado sigue una arquitectura de cuatro capas, que son las siguientes:

1. **Capa de Presentación (Controller):**
   - En esta capa, manejamos la interacción con el usuario a través de controladores. Los controladores gestionan las solicitudes HTTP, interactúan con los modelos de datos y llaman a los servicios para realizar operaciones de negocio. En nuestra aplicación, esta capa está representada por las clases en el paquete `com.indra.app.controllers`.

2. **Capa de Servicio (Service):**
   - La capa de servicio contiene la lógica de negocio de la aplicación. Aquí, definimos interfaces como `CocheService` y sus implementaciones, como `CocheServiceImpl` (en el paquete `com.indra.app.models.service`). Los servicios se encargan de realizar operaciones específicas relacionadas con los coches, como obtener todos los coches, obtener un coche por su ID, guardar un nuevo coche y eliminar un coche.

3. **Capa de Acceso a Datos (DAO/Repository):**
   - En esta capa, gestionamos el acceso a la base de datos. Utilizamos Spring Data JPA y definimos la interfaz `CocheRepository` (en el paquete `com.indra.app.models.dao`) que extiende `JpaRepository`. Esta interfaz proporciona métodos para realizar operaciones CRUD en la base de datos para la entidad `Coche`.

4. **Capa de Persistencia (Entity):**
   - La capa de persistencia contiene las entidades que representan los objetos de dominio de la aplicación. La entidad principal es `Coche` (en el paquete `com.indra.app.models.entity`). Estas entidades se mapean a tablas en la base de datos y contienen los atributos y relaciones que queremos persistir.

Estas cuatro capas siguen el patrón clásico de una aplicación de cuatro capas, lo que facilita la modularidad, la escalabilidad y el mantenimiento del código. La separación de responsabilidades entre estas capas ayuda a tener un diseño más limpio y estructurado.





Claro, vamos a revisar paso a paso la aplicación de gestión de coches que hemos desarrollado:

### 1. Creación de la Entidad `Coche`

La entidad `Coche` representa la estructura de los datos que queremos almacenar en la base de datos. Esta entidad se mapea a la tabla "coches" en la base de datos.

```java
@Entity
@Table(name = "coches")
public class Coche implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String marca;
    private String modelo;
    private String color;

    @Temporal(TemporalType.DATE)
    @Column(name = "fecha_fabricacion")
    private Date fechaFabricacion;

    // Getters y Setters omitidos para brevedad
}
```

Aquí hemos utilizado anotaciones de JPA (`@Entity`, `@Table`, `@Id`, `@GeneratedValue`, etc.) para definir la entidad y sus atributos.

### 2. Creación de la Interfaz `CocheRepository`

La interfaz `CocheRepository` extiende `JpaRepository` de Spring Data JPA y proporciona métodos para realizar operaciones CRUD en la base de datos para la entidad `Coche`.

```java
public interface CocheRepository extends JpaRepository<Coche, Long> {
    // Puedes agregar consultas personalizadas si es necesario
}
```

### 3. Creación de la Interfaz `CocheService`

La interfaz `CocheService` define las operaciones de negocio relacionadas con los coches que serán implementadas en la capa de servicio.

```java
public interface CocheService {
    List<Coche> obtenerTodosLosCoches();
    Optional<Coche> obtenerCochePorId(Long id);
    void guardarCoche(Coche coche);
    void eliminarCoche(Long id);
}
```

### 4. Implementación de `CocheServiceImpl`

La implementación de `CocheServiceImpl` proporciona la lógica concreta para las operaciones definidas en `CocheService`. Aquí, estamos utilizando `CocheRepository` para interactuar con la base de datos.

```java
@Service
public class CocheServiceImpl implements CocheService {

    @Autowired
    private CocheRepository cocheRepository;

    @Override
    public List<Coche> obtenerTodosLosCoches() {
        return cocheRepository.findAll();
    }

    @Override
    public Optional<Coche> obtenerCochePorId(Long id) {
        return cocheRepository.findById(id);
    }

    @Override
    public void guardarCoche(Coche coche) {
        cocheRepository.save(coche);
    }

    @Override
    public void eliminarCoche(Long id) {
        cocheRepository.deleteById(id);
    }
}
```

### 5. Creación del Controlador `CocheController`

El controlador `CocheController` maneja las solicitudes HTTP, interactúa con los modelos de datos y llama a los servicios para realizar operaciones de negocio.

```java
@Controller
@RequestMapping("/coches")
public class CocheController {

    @Autowired
    private CocheService cocheService;

    @GetMapping("/listar")
    public String listarCoches(Model model) {
        model.addAttribute("coches", cocheService.obtenerTodosLosCoches());
        return "listarCoches";
    }

    @GetMapping("/form")
    public String mostrarFormulario(@RequestParam(required = false) Long id, Model model) {
        Coche coche = new Coche();
        if (id != null) {
            Optional<Coche> optionalCoche = cocheService.obtenerCochePorId(id);
            if (optionalCoche.isPresent()) {
                coche = optionalCoche.get();
            }
        }
        model.addAttribute("coche", coche);
        return "formularioCoche";
    }

    @PostMapping("/form")
    public String guardarCoche(@ModelAttribute("coche") Coche coche) {
        cocheService.guardarCoche(coche);
        return "redirect:/coches/listar";
    }

    @GetMapping("/eliminar/{id}")
    public String eliminarCoche(@PathVariable Long id) {
        cocheService.eliminarCoche(id);
        return "redirect:/coches/listar";
    }
}
```

### 6. Creación de las Vistas con Thymeleaf

Se crearon dos vistas utilizando Thymeleaf: `listarCoches.html` y `formularioCoche.html`. Estas vistas manejan la presentación de los datos y permiten la interacción del usuario.

### 7. Configuración de la Base de Datos en `application.properties`

Se configuró la base de datos MySQL en el archivo `application.properties` para que la aplicación pueda conectarse y persistir los datos.

### 8. Ejecución de la Aplicación

La aplicación se ejecuta en un entorno Spring Boot, lo que permite que la aplicación se inicie y se ejecute fácilmente.

### 9. Pruebas en el Navegador

Se accede a la aplicación a través del navegador, y se pueden probar las funcionalidades de listar, agregar, editar y eliminar coches.

En resumen, esta aplicación sigue un patrón de cuatro capas, separando claramente las responsabilidades entre la capa de presentación, servicio, acceso a datos y persistencia. Este enfoque facilita el mantenimiento y la escalabilidad de la aplicación.